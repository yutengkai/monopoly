The monopoly game report.

Contributors : 
	Yu Tengkai - g3yuteng,
	Andreas Kyprianou - g0kypria

Part 1 -- Introduction to the game:

This is a standard monopoly game board.

We have:
	- the main board divided into several blocks.
	- small houses into different colors.
	- condos representing the big companies.
	- the “Question” (?) for the chance card drawing
	- the jewellery chest
	- a “GO” sign for the starting block.
	- the jail

There are two characters:
	- Mario
	- Pikachu

The users can let the dice roll to a random number,
then the charaters will move automatically.

(We cannot implement all the feature of the real game
due to the time limit.)

Part 2 -- Where we come up the idea.

When we solving the assignment 2 (individually),
we found some trick way to draw the 3D graph in open GL,
which can make fancy characters in a fast way
(like the Pikachu only cost us five to ten minute to draw).

This tech (or trick) result in our decision to build a well
designed 3D world in our final project.

The idea of actually making the monopoly game is by 
one of our group members girlfriend.

Yu’s strength is model building while Andreas is a genius of 
keyframing and planning.

We believe this project will let we both contribute
equally and end up with a good representation of the monopoly
game.

Part 3 -- Modeling:

Here come the trick how we build the 3D models.

Since you can tell the actual function of each model in the main.cpp
is super long (thousands of lines of code), we did not do the real 
design in the cpp files, but in the python file instead.

The first version of the cpp code generating file is the 
“gene.py” which is Yu’s tool in the assignment two.

But that turn to be weak in this big project, so we made 
the second python file “lego.py”. 
(we were making a lego toy simulator but we gave up).

“lego.py” allows us we build the simple objects like the 
house on the board, but it costs a lot of lines to init how
the model will look like and it is hard to maintain.

The final tool we used to build fancy characters like 
Mario, Pikachu and the chest is the “3d.py”.

This allows we draw the 8 bit graph in a super fast way 
and represent it into a 3D version.

“3d.py” transform each pixel of the 2D graph into a 3D bar,
and the drawing function makes us able to easily define the
colors and the size of our 3D object, and it is super easy 
to maintain.

Because the limit of the block size we can only have 2
characters moving on the board.
However if we want we can make much more (Nintendo)
characters in our game.

(Note the best part of these python function is that they handels
the normal vectors for all faces, which is super convenient 
for continuing lighting control.)

Part 4 -- Lighting

The light of the “sun” travels above the board.

It changes every time we stop rolling the dice.

We keep updating the variable sun_angle and use it to change
both frame and the joint_ui_data.

Each time we stop the dice we rotate the angle by 0.1 of PI,
but when the sun_angle becomes 1 we clears it since we do
not need the view of the “town” in the night.

Part 5 -- Keyframing

We used keyframing in an interesting way. We decided to have 
one keyframe file for the dice rolling animation, then one 
keyframe file for each individual dice number, and then one 
keyframe file that maintains the position of the characters. 

The reasoning behind this is that we have a way to animate each 
thing individually. However unfortunately due to time constraints 
we were not able to implement smooth animations for the movement 
of the players. They simply are placed in the position calculated 
based on the dice value rolled. The dice however animates and rolls 
and then one face is displayed facing upwards. This is the one that 
determines how many places your player will move.

Each block is 0.64 pixels wide and so each movement was calculated 
using multiples of 0.64. There is a small bug still with movement 
along the last side that we didn't have time to fix, but the players 
can move properly according to their dice rolls along the first 3 sides.
